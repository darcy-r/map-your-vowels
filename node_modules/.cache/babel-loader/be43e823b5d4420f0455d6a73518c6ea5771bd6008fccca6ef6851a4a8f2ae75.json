{"ast":null,"code":"var _jsxFileName = \"/Users/darcyroche/Documents/GitHub/map-your-vowels/src/Plot.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { React, useState, useEffect } from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleOrdinal, scaleQuantize } from '@visx/scale';\nimport { AxisRight, AxisTop } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { useTooltip, withTooltip, Tooltip, defaultStyles } from '@visx/tooltip';\nimport { WithTooltipProvidedProps } from '@visx/tooltip/lib/enhancers/withTooltip';\n// import useWindowDimensions from './useWindowDimensions.js'\n\n// tooltip stuff\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tooltipStyles = {\n  ...defaultStyles,\n  minWidth: 60,\n  backgroundColor: 'rgba(180,180,180,0.75)',\n  color: 'rgba(30,30,30,1)',\n  fontSize: '0.8rem'\n};\nlet tooltipTimeout;\nconst blue = \"#1f78b4\";\nconst orange = \"#ff7f00\";\nfunction getWindowDimensions() {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  return {\n    width,\n    height\n  };\n}\nfunction useWindowDimensions() {\n  _s();\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowDimensions;\n}\n\n// Finally we'll embed it all in an SVG\n_s(useWindowDimensions, \"XalQq70mIWrnM+6Jr3XornfayDc=\");\nfunction ScatterPlot(props) {\n  _s2();\n  const {\n    windowHeight,\n    windowWidth\n  } = useWindowDimensions();\n  // Define the graph dimensions and margins\n  let width = windowHeight;\n  let height = windowHeight; // window.InnerHeight;\n  console.log(\"Height of scatter plot should be: \", height);\n  const margin = {\n    top: 40,\n    bottom: 30,\n    left: 40,\n    right: 100\n  };\n  // Then we'll create some bounds\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n  // We'll make some helpers to get at the data we want\n  const x = props.normalisationMethod == \"none\" ? d => parseFloat(d.f2) : d => parseFloat(d.normalisedF2);\n  const y = props.normalisationMethod == \"none\" ? d => parseFloat(d.f1) : d => parseFloat(d.normalisedF1);\n  const c = d => d.dataset;\n  // And then scale the graph by our data\n  // TODO: update with Bark scale https://en.wikipedia.org/wiki/Bark_scale\n  const xDomainMin = Math.min(...props.data.map(x));\n  const xDomainMax = Math.max(...props.data.map(x));\n  const xScale = scaleLinear({\n    range: [xMax, 0],\n    round: true,\n    domain: [xDomainMin - (xDomainMax - xDomainMin) / 10, xDomainMax + (xDomainMax - xDomainMin) / 10]\n  });\n  const yDomainMin = Math.min(...props.data.map(y));\n  const yDomainMax = Math.max(...props.data.map(y));\n  const yScale = scaleLinear({\n    range: [0, yMax],\n    round: true,\n    domain: [yDomainMin - (yDomainMax - yDomainMin) / 10, yDomainMax + (yDomainMax - yDomainMin) / 10]\n  });\n  const colourScale = scaleOrdinal({\n    domain: [\"reference\", \"user input\"],\n    range: [blue, orange]\n  });\n  // Compose together the scale and accessor functions to get point functions\n  const compose = (scale, accessor) => data => scale(accessor(data));\n  const xPoint = compose(xScale, x);\n  const yPoint = compose(yScale, y);\n  const categoryColour = compose(colourScale, c);\n  // set up tooltips\n  const {\n    showTooltip,\n    hideTooltip,\n    tooltipOpen,\n    tooltipData,\n    tooltipLeft = 0,\n    tooltipTop = 0\n  } = useTooltip({\n    // initial tooltip state\n    tooltipOpen: false,\n    tooltipLeft: width / 3,\n    tooltipTop: height / 3,\n    tooltipData: 'Move me with your mouse or finger'\n  });\n  // render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      className: \"scatter-plot-chart\",\n      children: /*#__PURE__*/_jsxDEV(Group, {\n        left: margin.left,\n        top: margin.top,\n        children: [/*#__PURE__*/_jsxDEV(GridRows, {\n          scale: yScale,\n          width: xMax,\n          height: yMax,\n          stroke: \"#e0e0e0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridColumns, {\n          scale: xScale,\n          width: xMax,\n          height: yMax,\n          stroke: \"#e0e0e0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AxisTop, {\n          label: props.normalisationMethod == \"none\" ? \"F2 (Hz)\" : \"F2 (normalised)\",\n          bottom: yMax,\n          scale: xScale,\n          numTicks: width > 461 ? 12 : 6\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AxisRight, {\n          label: props.normalisationMethod == \"none\" ? \"F1 (Hz)\" : \"F1 (normalised)\",\n          left: xMax,\n          scale: yScale,\n          numTicks: height > 491 ? 12 : 8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), props.data.map((d, i) => {\n          return /*#__PURE__*/_jsxDEV(Group, {\n            children: [/*#__PURE__*/_jsxDEV(Circle, {\n              cx: xPoint(d),\n              cy: yPoint(d),\n              r: 6,\n              fill: categoryColour(d),\n              onMouseLeave: () => {\n                tooltipTimeout = window.setTimeout(() => {\n                  hideTooltip();\n                }, 300);\n              },\n              onMouseMove: () => {\n                if (tooltipTimeout) clearTimeout(tooltipTimeout);\n                showTooltip({\n                  tooltipData: d,\n                  tooltipTop: yPoint(d) + 30,\n                  tooltipLeft: xPoint(d)\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              fill: \"white\",\n              x: xPoint(d),\n              y: yPoint(d),\n              dx: \"1em\",\n              dy: \".33em\",\n              fontSize: 11,\n              textAnchor: \"left\",\n              pointerEvents: \"none\",\n              fill: categoryColour(d),\n              children: [d.elicitation, \" \", d.dataset == \"reference\" && \"/\" + d.description + \"/\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this)]\n          }, `circle-${i}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), tooltipOpen && tooltipData && /*#__PURE__*/_jsxDEV(Tooltip, {\n      top: tooltipTop,\n      left: tooltipLeft,\n      style: tooltipStyles,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tooltip-paragraph\",\n        children: [tooltipData.elicitation, \" vowel\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 46\n        }, this), \"F1: \", tooltipData.f1, \" Hz\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 38\n        }, this), \"F2: \", tooltipData.f2, \" Hz\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 7\n  }, this);\n}\n_s2(ScatterPlot, \"8k3KuzrS+a2dAlJ233Yijvm7QRo=\", false, function () {\n  return [useWindowDimensions, useTooltip];\n});\n_c = ScatterPlot;\nexport default ScatterPlot;\nvar _c;\n$RefreshReg$(_c, \"ScatterPlot\");","map":{"version":3,"names":["React","useState","useEffect","Group","Circle","scaleLinear","scaleOrdinal","scaleQuantize","AxisRight","AxisTop","GridRows","GridColumns","schemeRdYlBu","interpolateRdYlBu","useTooltip","withTooltip","Tooltip","defaultStyles","WithTooltipProvidedProps","jsxDEV","_jsxDEV","tooltipStyles","minWidth","backgroundColor","color","fontSize","tooltipTimeout","blue","orange","getWindowDimensions","innerWidth","width","innerHeight","height","window","useWindowDimensions","_s","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","ScatterPlot","props","_s2","windowHeight","windowWidth","console","log","margin","top","bottom","left","right","xMax","yMax","x","normalisationMethod","d","parseFloat","f2","normalisedF2","y","f1","normalisedF1","c","dataset","xDomainMin","Math","min","data","map","xDomainMax","max","xScale","range","round","domain","yDomainMin","yDomainMax","yScale","colourScale","compose","scale","accessor","xPoint","yPoint","categoryColour","showTooltip","hideTooltip","tooltipOpen","tooltipData","tooltipLeft","tooltipTop","children","className","stroke","fileName","_jsxFileName","lineNumber","columnNumber","label","numTicks","i","cx","cy","r","fill","onMouseLeave","setTimeout","onMouseMove","clearTimeout","dx","dy","textAnchor","pointerEvents","elicitation","description","style","_c","$RefreshReg$"],"sources":["/Users/darcyroche/Documents/GitHub/map-your-vowels/src/Plot.js"],"sourcesContent":["import { React, useState, useEffect } from 'react';\nimport { Group } from '@visx/group';\nimport { Circle } from '@visx/shape';\nimport { scaleLinear, scaleOrdinal, scaleQuantize } from '@visx/scale';\nimport { AxisRight, AxisTop } from '@visx/axis';\nimport { GridRows, GridColumns } from '@visx/grid';\nimport { schemeRdYlBu, interpolateRdYlBu } from 'd3-scale-chromatic';\nimport { useTooltip, withTooltip, Tooltip, defaultStyles } from '@visx/tooltip';\nimport { WithTooltipProvidedProps } from '@visx/tooltip/lib/enhancers/withTooltip';\n// import useWindowDimensions from './useWindowDimensions.js'\n\n// tooltip stuff\nconst tooltipStyles = {\n  ...defaultStyles,\n  minWidth: 60,\n  backgroundColor: 'rgba(180,180,180,0.75)',\n  color: 'rgba(30,30,30,1)',\n  fontSize: '0.8rem',\n};\nlet tooltipTimeout;\n\nconst blue = \"#1f78b4\"\nconst orange = \"#ff7f00\"\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return windowDimensions;\n}\n\n// Finally we'll embed it all in an SVG\nfunction ScatterPlot(props) {\n  const { windowHeight, windowWidth } = useWindowDimensions();\n  // Define the graph dimensions and margins\n  let width = windowHeight;\n  let height = windowHeight; // window.InnerHeight;\n  console.log(\"Height of scatter plot should be: \", height);\n  const margin = { top: 40, bottom: 30, left: 40, right: 100 };\n  // Then we'll create some bounds\n  const xMax = width - margin.left - margin.right;\n  const yMax = height - margin.top - margin.bottom;\n  // We'll make some helpers to get at the data we want\n  const x = props.normalisationMethod == \"none\" ? d => parseFloat(d.f2) : d => parseFloat(d.normalisedF2);\n  const y = props.normalisationMethod == \"none\" ? d => parseFloat(d.f1) : d => parseFloat(d.normalisedF1);\n  const c = d => d.dataset;\n  // And then scale the graph by our data\n  // TODO: update with Bark scale https://en.wikipedia.org/wiki/Bark_scale\n  const xDomainMin = Math.min(...props.data.map(x));\n  const xDomainMax = Math.max(...props.data.map(x));\n  const xScale = scaleLinear({\n    range: [xMax, 0],\n    round: true,\n    domain: [xDomainMin - ((xDomainMax - xDomainMin) / 10), xDomainMax + ((xDomainMax - xDomainMin) / 10)],\n  });\n  const yDomainMin = Math.min(...props.data.map(y));\n  const yDomainMax = Math.max(...props.data.map(y));\n  const yScale = scaleLinear({\n    range: [0, yMax],\n    round: true,\n    domain: [yDomainMin - ((yDomainMax - yDomainMin) / 10), yDomainMax + ((yDomainMax - yDomainMin) / 10)],\n  });\n  const colourScale = scaleOrdinal({\n    domain: [\"reference\", \"user input\"],\n    range: [blue, orange],\n  });\n  // Compose together the scale and accessor functions to get point functions\n  const compose = (scale, accessor) => data => scale(accessor(data));\n  const xPoint = compose(xScale, x);\n  const yPoint = compose(yScale, y);\n  const categoryColour = compose(colourScale, c);\n  // set up tooltips\n  const {\n    showTooltip,\n    hideTooltip,\n    tooltipOpen,\n    tooltipData,\n    tooltipLeft = 0,\n    tooltipTop = 0,\n  } = useTooltip({\n    // initial tooltip state\n    tooltipOpen: false,\n    tooltipLeft: width / 3,\n    tooltipTop: height / 3,\n    tooltipData: 'Move me with your mouse or finger',\n  });\n  // render\n  return (\n      <div>\n        <svg width={width} height={height} className=\"scatter-plot-chart\">\n          <Group left={margin.left} top={margin.top}>\n            <GridRows scale={yScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n            <GridColumns scale={xScale} width={xMax} height={yMax} stroke=\"#e0e0e0\" />\n            <AxisTop label={props.normalisationMethod == \"none\" ? \"F2 (Hz)\" : \"F2 (normalised)\"} bottom={yMax} scale={xScale} numTicks={width > 461 ? 12 : 6} />\n            <AxisRight label={props.normalisationMethod == \"none\" ? \"F1 (Hz)\" : \"F1 (normalised)\"} left={xMax} scale={yScale} numTicks={height > 491 ? 12 : 8}/>\n            {props.data.map((d, i) => {\n              return (\n                <Group key={`circle-${i}`}>\n                  <Circle\n                    cx={xPoint(d)}\n                    cy={yPoint(d)}\n                    r={6}\n                    fill={categoryColour(d)}\n                    onMouseLeave={() => {\n                      tooltipTimeout = window.setTimeout(() => {\n                        hideTooltip();\n                      }, 300);\n                    }}\n                    onMouseMove={() => {\n                      if (tooltipTimeout) clearTimeout(tooltipTimeout);\n                      showTooltip({\n                        tooltipData: d,\n                        tooltipTop: yPoint(d) + 30,\n                        tooltipLeft: xPoint(d),\n                      });\n                    }}\n                  />\n                  <text\n                    fill=\"white\"\n                    x={xPoint(d)}\n                    y={yPoint(d)}\n                    dx=\"1em\"\n                    dy=\".33em\"\n                    fontSize={11}\n                    textAnchor=\"left\"\n                    pointerEvents=\"none\"\n                    fill={categoryColour(d)}\n                  >\n                    {d.elicitation} {d.dataset == \"reference\" && \"/\" + d.description + \"/\"}\n                  </text>\n                </Group>\n              );\n            })}\n          </Group>\n        </svg>\n\n        {tooltipOpen && tooltipData && (\n          <Tooltip top={tooltipTop} left={tooltipLeft} style={tooltipStyles}>\n            <div className=\"tooltip-paragraph\">\n              {tooltipData.elicitation} vowel<br/>\n              F1: {tooltipData.f1} Hz<br/>\n              F2: {tooltipData.f2} Hz\n            </div>\n          </Tooltip>\n        )}\n      </div>\n  );\n}\n\nexport default ScatterPlot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}